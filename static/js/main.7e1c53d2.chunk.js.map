{"version":3,"sources":["components/pages/not-found/NotFoundPage.jsx","components/pages/create/nft/upload/lines/SingleCharLine.jsx","components/pages/create/nft/upload/lines/SingleNumberLine.jsx","components/pages/create/nft/upload/containers/SingleLineContainer.jsx","components/pages/create/nft/upload/containers/MultiLineContainer.jsx","components/pages/create/nft/upload/lines/PropertyInput.jsx","components/pages/create/nft/upload/UploadFileInput.jsx","business-logic/ipfs/upload.ts","components/ui/text/DarkBlueTitle.jsx","components/ui/shadow/BlueShadowContainer.jsx","business-logic/chain.info.js","wallet/connectKeplr.js","wallet/useWallet.js","wallet/hooks.js","business-logic/config.js","business-logic/models/nft.ts","business-logic/api/api.js","state/profile/slice.ts","components/ui/loaders/TransactionLoader.jsx","components/pages/guest/Guest.jsx","components/nft-item/details/image/NftImage.jsx","components/nft-item/NftBoxContainer.jsx","components/nft-item/details/minted/NftMintedLink.jsx","components/nft-item/details/title/NftTitle.jsx","components/ui/modal/InputPriceModal.jsx","hooks/redux.ts","state/transaction/nft/slice.ts","components/nft-item/NftItem.jsx","state/transaction/nft/thunk.ts","components/pages/create/nft/CreateNftPage.jsx","components/nft-collection/NftsGrid.jsx","components/pages/explore/nft/ExploreNftPage.jsx","hoc/explore/nft/ExploreNftsPageHoc.jsx","state/profile/thunk.ts","launch/AppRouter.jsx","resources/label.png","components/pages/navbar/Navbar.js","components/pages/navbar/NavbarContainer.js","launch/App.tsx","state/navbar/slice.ts","state/store.ts","index.tsx"],"names":["NotFoundPage","className","SingleCharLine","props","type","name","id","placeholder","text","minLength","maxLength","onChange","e","setState","target","value","SingleNumberLine","min","max","SingleLineContainer","required","MultiLineContainer","rows","defaultValue","PropertyInput","UploadMediaIcon","stroke","fill","viewBox","d","strokeWidth","strokeLinecap","strokeLinejoin","UploadFileInput","state","accept","files","width","src","URL","createObjectURL","alt","onClick","xmlns","description","image","traits","a","client","NFTStorage","token","store","makeNftLink","nftIpfsLink","startsWith","slice","DarkBlueTitle","title","BlueShadowContainer","children","ChainInfo","chainId","chainName","rpc","rest","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","faucets","features","connectKeplr","window","keplr","experimentalSuggestChain","enable","console","warn","CosmWasmContext","Provider","createContext","walletAddress","signingClient","loading","error","connectWallet","disconnect","gasPrice","useSigningClient","useContext","SigningCosmWasmProvider","useState","setSigningClient","setWalletAddress","setLoading","setError","setGasPrice","getOfflineSigner","offlineSigner","getAccounts","address","GasPrice","fromString","SigningCosmWasmClient","connectWithSigner","useWallet","NFT_CONTRACT_ID","NftCollection","collection","this","MintSite","nftLink","NFT","contractId","tokenId","ownerId","copies","mediaURL","referenceURL","mintSite","price","convertNFT","nft","metadata","info","extension","access","owner","token_uri","userAddress","token_metadata","payout","entrypoint","mint","media","reference","txFee","calculateFee","execute","tx","log","initQueryHandler","CosmWasmClient","connect","cwClient","queryClient","wasm","queryContractSmart","getNFT","queryHandler","all_nft_info","token_id","getUserNFTs","accountId","resNFTs","tokens","start_after","limit","tokenIds","nftPromise","push","sendNFT","toAddr","transfer_nft","recipient","PROFILE_TAB","TransactionLoader","loop","animationData","lottieJson","play","style","height","Guest","to","NftImage","path","NftBoxContainer","NftMintedLink","mintedName","mintedLink","href","NftTitle","InputPriceModal","hidden","setVisible","setPrice","fillRule","clipRule","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","pending","undefined","full_success","success_state","marketNftTransactionSlice","createSlice","reducers","commit","commit_two","first_success","success","failure","reset","marketNftTransactionReducer","reducer","NftItem","isPreview","visible","previewLink","isListed","dispatch","to_addr","actions","then","catch","sendNft","LineAlert","role","CreateNftPage","exampleNft","setTitle","setDescription","royalty","setRoyalty","file","setFile","isLoading","setIsLoading","alertText","setAlertText","setNFT","propertiesNum","setPropertiesNum","fetchProperties","setFetchProperties","useEffect","curURL","curText","curNFT","stage","onSubmit","preventDefault","length","storeNFT","res","ipfsMedia","data","ipfsRef","url","toString","mintToCommonCollection","concat","tmpNum","pop","map","ind","NftsGrid","nfts","fetching","getKey","ExploreNftPage","tabs","ALL_NFTS","LISTED_NFTS","HISTORY","activeTab","history","profileSlice","changeTab","action","payload","addNft","startFetching","resetNfts","profileReducer","ExploreNftsPageHoc","profile","AppRouter","exact","element","Navbar","explore","create","single","imgLabel","NavbarContainer","navbar","App","navbarReducer","rootReducer","combineReducers","transaction","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e1c53d2.chunk.js","sourcesContent":["import React from 'react';\n\nconst NotFoundPage = () => {\n    return (\n        <div className=\"bg-black h-screen auto pt-20\">\n            <div className=\"p-2 text-3xl text-center font-extrabold text-transparent bg-clip-text\n                           md:text-6xl bg-gradient-to-br from-blue-200 to-blue-500\">\n                Not Found\n            </div>\n        </div>\n    );\n};\n\nexport default NotFoundPage;","const SingleCharLine = (props) => {\n    return (\n        <input\n            type={props.type}\n            name={props.id}\n            id={props.id}\n            className=\"focus:border-cyan-500 flex-1 block w-full rounded-none rounded-md sm:text-sm border-gray-300\"\n            placeholder={props.text}\n            minLength={props.minLength}\n            maxLength={props.maxLength}\n            onChange={(e) => props.setState(e.target.value)}\n        />\n    );\n};\n\nexport default SingleCharLine;","import React from \"react\";\n\nconst SingleNumberLine = (props) => {\n    return (\n        <input\n            type={props.type}\n            name={props.id}\n            id={props.id}\n            className=\"peer focus:ring-indigo-500 focus:border-cyan-500 flex-1 block w-full rounded-none rounded-md sm:text-sm border-gray-300\"\n            placeholder={props.text}\n            min={props.min}\n            max={props.max}\n            onChange={(e) => props.setState(e.target.value)}\n        />\n    );\n};\n\nexport default SingleNumberLine;","import React from \"react\";\nimport SingleCharLine from \"../lines/SingleCharLine\";\nimport SingleNumberLine from \"../lines/SingleNumberLine\";\n\n\nconst SingleLineContainer = (props) => {\n    return (\n        <div className=\"grid grid-cols-3 gap-6\">\n            <div className=\"sm:col-span-2 col-span-3\">\n                <label\n                    className=\"block font-bold text-sm text-white\">\n                    {props.name}{props.required ? <b className=\"text-sm font-large text-red-500\">*</b>:<></>}\n                </label>\n                <div className=\"mt-1 flex rounded-md shadow-sm\">\n                    {props.type === 'text' ? (\n                        <SingleCharLine name={props.name} text={props.text} type={props.type}\n                                        minLength={props.minLength} maxLength={props.maxLength} id={props.id}\n                                        setState={props.setState}\n                        />\n                    ) : (\n                        <SingleNumberLine name={props.name} text={props.text} type={props.type} min={props.min}\n                                          max={props.max} id={props.id} setState={props.setState}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default SingleLineContainer;","import React from \"react\";\n\nconst MultiLineContainer = (props) => {\n    return (\n        <div className=\"grid grid-cols-3 gap-6\">\n            <div className=\"sm:col-span-2 col-span-3\">\n\n                <label className=\"block text-sm font-bold text-white\">\n                    {props.name}\n                </label>\n                <div className=\"mt-1\">\n                      <textarea\n                          id={props.id}\n                          name={props.id}\n                          rows={props.rows}\n                          className=\"shadow-sm focus:ring-indigo-500 focus:border-cyan-500 mt-1 block w-full sm:text-sm border border-gray-300 rounded-md\"\n                          placeholder=\"Brief description for your NFT\"\n                          defaultValue={''}\n                          maxLength={props.maxLength}\n                          onChange={(e) => props.setState(e.target.value)}\n                      />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default MultiLineContainer;","const PropertyInput = (props) => {\n    return (\n        <div className=\"col-span-6 sm:col-span-3\">\n            <label className=\"text-sm font-medium text-white\">\n                {props.name}\n            </label>\n            <input\n                type={props.type}\n                name={props.id}\n                id={props.id}\n                maxLength={props.maxLength}\n                className=\"mt-1 focus:ring-indigo-500 focus:border-cyan-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md\"\n            />\n        </div>\n    )\n};\n\nexport default PropertyInput;","import React from \"react\";\n\nconst UploadMediaIcon = () => {\n    return (\n        <svg\n            className=\"mx-auto h-24 w-24 text-gray-400\"\n            stroke=\"currentColor\"\n            fill=\"none\"\n            viewBox=\"0 0 48 48\"\n            aria-hidden=\"true\"\n        >\n            <path\n                d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\"\n                strokeWidth={2}\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n};\n\nconst UploadFileInput = (props) => {\n    return (\n        <div>\n            <label className=\"block text-sm font-bold text-white\">\n                Upload artwork file<b className=\"text-sm font-large text-red-500\">*</b>\n            </label>\n            {props.state === null ? (\n                    <div className=\"bg-white p-2 relative border-2 border-gray-300 border-dashed w-full h-full inherit-border-radius\">\n                        <div className=\"space-y-1 text-center flex flex-col items-center justify-center h-full w-full\">\n                            <div className=\"flex text-sm text-gray-600\">\n                                <label className=\"mx-auto cursor-pointer bg-white rounded-md font-medium\n                                             text-blue-500 hover:text-indigo-500\n                                             focus:outline-none\n                                             focus-visible:ring-0\"\n                                >\n                                    <UploadMediaIcon/>\n                                    Upload image\n                                    <input id=\"file-upload\" name=\"file-upload\" type=\"file\" accept=\"image/gif, image/jpeg, image/png\"\n                                           className=\"sr-only\" onChange={(e) => props.setState(e.target.files[0])}/>\n                                    <p className=\"text-xs text-gray-500\">\n                                        PNG, JPG, GIF up to 10MB\n                                    </p>\n                                </label>\n                            </div>\n                        </div>\n                    </div>\n\n            ):(\n                <div className=\"flex justify-start mt-1 px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md\">\n                    <div className=\"relative\">\n                    <img width=\"100px\" src={URL.createObjectURL(props.state)} alt=\"nft image\"/>\n                    <button className=\"absolute top-0 right-0 -mx-2 -my-2 bg-gray-900 text-white rounded-full hover:bg-gray-500 cursor-pointer\"\n                            onClick={() => props.setState(null)}>\n                        <svg className=\"h-5 w-5\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"\n                             stroke=\"currentColor\" aria-hidden=\"true\">\n                            <path d=\"M6 18L18 6M6 6l12 12\"/>\n                        </svg>\n                    </button>\n                    </div>\n                </div>\n\n            )}\n        </div>\n    )\n};\n\nexport default UploadFileInput;","import {NFTStorage} from 'nft.storage'\n\nexport async function storeNFT(name: any, description: any, image: any, traits: any) {\n    const client = new NFTStorage({\n        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDYzZDFBZDhCMWIzMjQyQjFjMkUwNjE2NzcyOUNmMGEwYmIyNDE1OTUiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY0MDExNjI4NTY3OSwibmFtZSI6InRldHMgZm9yIG9wZW4gbmZ0In0.gU_buy_gF4XUwptAU7Ck5_TSrfhZNLva5h2uWAusHNo'\n    })\n\n    return await client.store({\n        name,\n        description,\n        image,\n        traits\n    })\n}\n\nexport function makeNftLink(nftIpfsLink: string) {\n    if (nftIpfsLink.startsWith('ipfs://')) {\n        return 'https://ipfs.io/ipfs/' + nftIpfsLink.slice(7)\n    }\n    return \"\"\n}\n","import React from 'react';\n\nconst DarkBlueTitle = ({title}) => {\n    return (\n        <div\n            className=\"text-center font-extrabold text-transparent bg-clip-text\n                       bg-gradient-to-br from-green-200 to-mjol-blue-base\n                       text-5xl md:text-6xl lg:text-7xl\"\n        >\n            {title}\n        </div>\n    );\n};\n\nexport default DarkBlueTitle;","import React from 'react';\n\nconst BlueShadowContainer = ({children}) => {\n    return (\n        <div className=\"bg-black shadow-mjol-base-blue-xl pt-4\">\n            {children}\n        </div>\n    );\n};\n\nexport default BlueShadowContainer;","// export const ChainInfo = {\n//   // Chain-id of the Cosmos SDK chain.\n//   chainId: \"constantine-1\",\n//   // The name of the chain to be displayed to the user.\n//   chainName: \"Constantine Testnet\",\n//   // RPC endpoint of the chain.\n//   rpc: \"https://rpc.constantine-1.archway.tech\" ,\n//   // REST endpoint of the chain.\n//   rest: \"https://api.constantine-1.archway.tech\",\n//   // Staking coin information\n//   stakeCurrency: {\n//     // Coin denomination to be displayed to the user.\n//     coinDenom: \"CONST\",\n//     // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n//     coinMinimalDenom: \"uconst\",\n//     // # of decimal points to convert minimal denomination to user-facing denomination.\n//     coinDecimals: 6,\n//     // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n//     // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n//     // coinGeckoId: \"\"\n// \t},\n//   // (Optional) If you have a wallet webpage used to stake the coin then provide the url to the website in `walletUrlForStaking`.\n//   // The 'stake' button in Keplr extension will link to the webpage.\n//   // walletUrlForStaking: \"\",\n//   // The BIP44 path.\n//   bip44: {\n//     // You can only set the coin type of BIP44.\n//     // 'Purpose' is fixed to 44.\n//     coinType: 118,\n//   },\n//   // Bech32 configuration to show the address to user.\n//   // This field is the interface of\n//   // {\n//   //   bech32PrefixAccAddr: string;\n//   //   bech32PrefixAccPub: string;\n//   //   bech32PrefixValAddr: string;\n//   //   bech32PrefixValPub: string;\n//   //   bech32PrefixConsAddr: string;\n//   //   bech32PrefixConsPub: string;\n//   // }\n//   bech32Config: {\n//     bech32PrefixAccAddr: \"archway\",\n//     bech32PrefixAccPub: \"archwaypub\",\n//     bech32PrefixValAddr: \"archwayvaloper\",\n//     bech32PrefixValPub: \"archwayvaloperpub\",\n//     bech32PrefixConsAddr: \"archwayvalcons\",\n//     bech32PrefixConsPub: \"archwayvalconspub\"\n//   },\n//   // List of all coin/tokens used in this chain.\n//   currencies: [{\n//     // Coin denomination to be displayed to the user.\n//     coinDenom: \"CONST\",\n//     // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n//     coinMinimalDenom: \"uconst\",\n//     // # of decimal points to convert minimal denomination to user-facing denomination.\n//     coinDecimals: 6,\n//     // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n//     // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n//     // coinGeckoId: \"\"\n//   }],\n//   // List of coin/tokens used as a fee token in this chain.\n//   feeCurrencies: [{\n//     // Coin denomination to be displayed to the user.\n//     coinDenom: \"CONST\",\n//     // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n//     coinMinimalDenom: \"uconst\",\n//     // # of decimal points to convert minimal denomination to user-facing denomination.\n//     coinDecimals: 6,\n//     // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n//     // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n//     // coinGeckoId: \"\"\n//   }],\n//   // (Optional) The number of the coin type.\n//   // This field is only used to fetch the address from ENS.\n//   // Ideally, it is recommended to be the same with BIP44 path's coin type.\n//   // However, some early chains may choose to use the Cosmos Hub BIP44 path of '118'.\n//   // So, this is separated to support such chains.\n//   coinType: 118,\n//   // (Optional) This is used to set the fee of the transaction.\n//   // If this field is not provided, Keplr extension will set the default gas price as (low: 0.01, average: 0.025, high: 0.04).\n//   // Currently, Keplr doesn't support dynamic calculation of the gas prices based on on-chain data.\n//   // Make sure that the gas prices are higher than the minimum gas prices accepted by chain validators and RPC/REST endpoint.\n//   gasPriceStep: {\n//     low: 0,\n//     average: 0.1,\n//     high: 0.2\n//   },\n//   faucets: [\"https://faucet.constantine-1.archway.tech\"],\n//   features: ['cosmwasm']\n// };\n\nexport const ChainInfo = {\n  // Chain-id of the Cosmos SDK chain.\n  chainId: \"torii-1\",\n  // The name of the chain to be displayed to the user.\n  chainName: \"Torii Testnet\",\n  // RPC endpoint of the chain.\n  rpc: \"https://rpc.torii-1.archway.tech\",\n  // REST endpoint of the chain.\n  rest: \"https://api.torii-1.archway.tech\",\n  // Staking coin information\n  stakeCurrency: {\n    // Coin denomination to be displayed to the user.\n    coinDenom: \"TORII\",\n    // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n    coinMinimalDenom: \"utorii\",\n    // # of decimal points to convert minimal denomination to user-facing denomination.\n    coinDecimals: 6,\n    // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n    // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n    // coinGeckoId: \"\"\n  },\n  // (Optional) If you have a wallet webpage used to stake the coin then provide the url to the website in `walletUrlForStaking`.\n  // The 'stake' button in Keplr extension will link to the webpage.\n  // walletUrlForStaking: \"\",\n  // The BIP44 path.\n  bip44: {\n    // You can only set the coin type of BIP44.\n    // 'Purpose' is fixed to 44.\n    coinType: 118,\n  },\n  // Bech32 configuration to show the address to user.\n  // This field is the interface of\n  // {\n  //   bech32PrefixAccAddr: string;\n  //   bech32PrefixAccPub: string;\n  //   bech32PrefixValAddr: string;\n  //   bech32PrefixValPub: string;\n  //   bech32PrefixConsAddr: string;\n  //   bech32PrefixConsPub: string;\n  // }\n  bech32Config: {\n    bech32PrefixAccAddr: \"archway\",\n    bech32PrefixAccPub: \"archwaypub\",\n    bech32PrefixValAddr: \"archwayvaloper\",\n    bech32PrefixValPub: \"archwayvaloperpub\",\n    bech32PrefixConsAddr: \"archwayvalcons\",\n    bech32PrefixConsPub: \"archwayvalconspub\",\n  },\n  // List of all coin/tokens used in this chain.\n  currencies: [\n    {\n      // Coin denomination to be displayed to the user.\n      coinDenom: \"TORII\",\n      // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n      coinMinimalDenom: \"utorii\",\n      // # of decimal points to convert minimal denomination to user-facing denomination.\n      coinDecimals: 6,\n      // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n      // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n      // coinGeckoId: \"\"\n    },\n  ],\n  // List of coin/tokens used as a fee token in this chain.\n  feeCurrencies: [\n    {\n      // Coin denomination to be displayed to the user.\n      coinDenom: \"TORII\",\n      // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n      coinMinimalDenom: \"utorii\",\n      // # of decimal points to convert minimal denomination to user-facing denomination.\n      coinDecimals: 6,\n      // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n      // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n      // coinGeckoId: \"\"\n    },\n  ],\n  // (Optional) The number of the coin type.\n  // This field is only used to fetch the address from ENS.\n  // Ideally, it is recommended to be the same with BIP44 path's coin type.\n  // However, some early chains may choose to use the Cosmos Hub BIP44 path of '118'.\n  // So, this is separated to support such chains.\n  coinType: 118,\n  // (Optional) This is used to set the fee of the transaction.\n  // If this field is not provided, Keplr extension will set the default gas price as (low: 0.01, average: 0.025, high: 0.04).\n  // Currently, Keplr doesn't support dynamic calculation of the gas prices based on on-chain data.\n  // Make sure that the gas prices are higher than the minimum gas prices accepted by chain validators and RPC/REST endpoint.\n  gasPriceStep: {\n    low: 0,\n    average: 0.1,\n    high: 0.2,\n  },\n  faucets: [\"https://faucet.torii-1.archway.tech\"],\n  features: [\"cosmwasm\"],\n};","import {ChainInfo} from \"../business-logic/chain.info\";\n\n\nexport async function connectKeplr() {\n    if (window['keplr']) {\n        if (window.keplr['experimentalSuggestChain']) {\n            await window.keplr.experimentalSuggestChain(ChainInfo);\n            await window.keplr.enable(ChainInfo.chainId);\n        } else {\n            console.warn(\n                'Error accessing experimental features, please update Keplr',\n            );\n        }\n    } else {\n        console.warn('Error accessing Keplr, please install Keplr');\n    }\n}","import { useState } from 'react';\nimport { SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';\nimport { GasPrice } from '@cosmjs/stargate';\nimport {connectKeplr} from \"./connectKeplr\";\nimport {ChainInfo} from \"../business-logic/chain.info\";\n\n\nexport const useWallet = () => {\n    const [signingClient, setSigningClient] =\n    useState(null);\n    const [walletAddress, setWalletAddress] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [gasPrice, setGasPrice] = useState(null);\n\n    const connectWallet = async () => {\n        setLoading(true);\n\n        try {\n            await connectKeplr();\n            const offlineSigner = await window.getOfflineSigner(ChainInfo.chainId);\n\n            // get user address\n            const [{ address }] = await offlineSigner.getAccounts();\n            setWalletAddress(address);\n            // Gas price\n            setGasPrice(GasPrice.fromString('0.002utorii'));\n\n            // make client\n            setSigningClient(\n                await SigningCosmWasmClient.connectWithSigner(\n                    ChainInfo.rpc,\n                    offlineSigner,\n                ),\n            );\n\n            setLoading(false);\n        } catch (error) {\n            setError(error);\n        }\n    };\n\n    const disconnect = () => {\n        if (signingClient) {\n            signingClient.disconnect();\n        }\n        setWalletAddress('');\n        setSigningClient(null);\n        setLoading(false);\n        setGasPrice(null);\n    };\n\n    return {\n        walletAddress,\n        signingClient,\n        loading,\n        error,\n        connectWallet,\n        disconnect,\n        gasPrice,\n    };\n};","import { createContext, useContext, ReactNode } from 'react'\nimport {useWallet} from \"./useWallet\";\n\nlet CosmWasmContext;\nlet {Provider} = (CosmWasmContext = createContext({\n    walletAddress: '',\n    signingClient: null,\n    loading: false,\n    error: null,\n    connectWallet: () => {},\n    disconnect: () => {},\n    gasPrice: 0\n}))\n\nexport const useSigningClient = () =>\n    useContext(CosmWasmContext)\n\nexport const SigningCosmWasmProvider = ({children}) => {\n    const value = useWallet();\n    return <Provider value={value}>{children}</Provider>\n}","export const NFT_CONTRACT_ID = \"archway1vrhksyqn38ptd2srpjwe9tdevg60f7hexjsd6larndvn0u50e0wsvcjuzj\";\n","export class NftCollection {\n    collection: string\n\n    constructor(collection: string = \"\") {\n        this.collection = collection\n    }\n}\n\nexport class MintSite {\n    name: string\n    nftLink: string\n\n    constructor(name: string = \"\", nftLink: string = \"\") {\n        this.name = name\n        this.nftLink = nftLink\n    }\n}\n\n\nexport class NFT {\n\n    contractId: string\n    tokenId: string\n    ownerId: string\n    title: string\n    description: string\n    copies: number\n    mediaURL: string\n    referenceURL : string | undefined\n    mintSite: MintSite | undefined\n    price: string | undefined\n\n\n    constructor(\n        contractId: string,\n        tokenId: string,\n        ownerId: string,\n        title: string,\n        description: string,\n        copies: number,\n        mediaURL: string,\n        referenceURL?: string,\n        mintSite?: MintSite,\n        price?: string\n    ) {\n        // NFT setup id\n        this.contractId = contractId;\n\n        // NFT token id\n        this.tokenId = tokenId;\n\n        // NFT owner id\n        this.ownerId = ownerId;\n\n        // NFT title\n        this.title = title;\n\n        // NFT description\n        this.description = description;\n\n        // Amount of NFT copies\n        this.copies = copies;\n\n        // Link to nfts media url.\n        this.mediaURL = mediaURL;\n\n        // Link to JSON file with extra information about NFT, like\n        // traits, history etc.\n        this.referenceURL = referenceURL;\n\n        // Contains information about mint on external transaction.\n        this.mintSite = mintSite;\n\n        // Listed NFT transaction price,\n        // `null` if NFT not listed\n        this.price = price;\n    }\n\n    isListed() {\n        return this.price !== null\n    }\n\n    // Returns primary key for NFT,\n    // 'contractId/tokenId'\n    getKey() {\n        return this.contractId + '/' + this.tokenId\n    }\n\n    // Returns traits for NFT,\n    // If traits not provided returns `null`\n    getTraits() {\n        //async GET json from this.reference_url\n        return null\n    }\n\n    // Returns information about NFT collection\n    getCollectionInfo() {\n        // async GET json from this.referenceURL\n        return new NftCollection()\n    }\n\n}","import {ChainInfo} from \"../chain.info\";\nimport {CosmWasmClient} from \"@cosmjs/cosmwasm-stargate\";\nimport {NFT_CONTRACT_ID} from \"../config\";\n\nimport {calculateFee} from \"@cosmjs/stargate\";\n\nimport {MintSite, NFT} from \"../models/nft\";\n\n\nfunction convertNFT(contractId, tokenId, nft, price){\n    const metadata = nft.info.extension;\n    return new NFT(\n        contractId,\n        tokenId,\n        nft.access.owner,\n        metadata.name,\n        metadata.description,\n        1,\n        metadata.image,\n        nft.info.token_uri,\n        new MintSite(\"\", \"\"),\n        price\n    )\n}\n\n\nexport async function mintToCommonCollection (userAddress, signingClient, gasPrice, token_metadata, payout) {\n    let entrypoint = {\n        mint: {\n            owner: userAddress,\n            extension: {\n                name: token_metadata.title,\n                description: token_metadata.description,\n                image: token_metadata.media,\n            },\n            token_uri: token_metadata.reference\n        }\n    };\n    let txFee = calculateFee(500000, gasPrice);\n\n    try {\n        let tx = await signingClient.execute(userAddress, NFT_CONTRACT_ID, entrypoint, txFee);\n        console.log('Mint Tx', tx);\n        return tx\n    } catch (e) {\n        console.warn('Error', e);\n        return null\n    }\n}\n\n\nasync function initQueryHandler() {\n    let cwClient = await CosmWasmClient.connect(ChainInfo.rpc);\n    return cwClient.queryClient.wasm.queryContractSmart\n}\n\nexport async function getNFT(contractId, tokenId) {\n    let queryHandler = await initQueryHandler()\n    let entrypoint = {\n        all_nft_info: {\n            token_id: tokenId\n        }\n    };\n    const nft = await queryHandler(contractId, entrypoint);\n    const price = null;\n    return convertNFT(contractId, tokenId, nft, price)\n}\n\n\nexport async function getUserNFTs(accountId) {\n    console.log(\"User account address\", accountId)\n    let queryHandler = await initQueryHandler()\n\n    let resNFTs = [];\n    let entrypoint = {\n        tokens: {\n            owner: accountId,\n            start_after: \"0\",\n            limit: 20\n        }\n    };\n    const tokenIds = await queryHandler(NFT_CONTRACT_ID, entrypoint);\n    for (let tokenId of tokenIds[\"tokens\"]) {\n        const nftPromise = getNFT(NFT_CONTRACT_ID, tokenId);\n        resNFTs.push(nftPromise)\n    }\n    console.log(\"res\", resNFTs)\n    return resNFTs\n}\n\n\nexport async function sendNFT(userAddress, signingClient, gasPrice, contractId, tokenId, toAddr) {\n    let entrypoint = {\n        transfer_nft: {\n            recipient: toAddr,\n            token_id: tokenId\n        }\n    };\n    let txFee = calculateFee(500000, gasPrice);\n\n    let tx = await signingClient.execute(userAddress, contractId, entrypoint, txFee);\n    console.log('Send Tx', tx);\n    return tx\n\n}\n\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {NFT} from \"../../business-logic/models/nft\";\n\nexport enum PROFILE_TAB {\n    ALL_NFTS = \"All NFTs\",\n    LISTED_NFTS = \"Listed NFTs\",\n    HISTORY = \"My History\"\n}\n\nexport interface ProfileState {\n    tabs: Array<PROFILE_TAB>,\n    activeTab: PROFILE_TAB,\n    fetching: boolean,\n    success: boolean | undefined,\n    nfts: Array<NFT>,\n    history: []\n}\n\nconst initialState: ProfileState = {\n    tabs: [PROFILE_TAB.ALL_NFTS, PROFILE_TAB.LISTED_NFTS, PROFILE_TAB.HISTORY],\n    activeTab: PROFILE_TAB.ALL_NFTS,\n    fetching: true,\n    success: undefined,\n    nfts: [],\n    history: []\n}\n\nexport const profileSlice = createSlice({\n    name: \"profile\",\n    initialState,\n    reducers: {\n        changeTab: (state, action: PayloadAction<PROFILE_TAB>) => {\n            state.activeTab = action.payload\n        },\n        addNft: (state, action: PayloadAction<NFT | null>) => {\n            if (action.payload) {\n                state.nfts.push(action.payload)\n            }\n        },\n        startFetching: (state) => {\n            state.fetching = true\n        },\n        success: (state) => {\n            state.success = true\n            state.fetching = false\n        },\n        failure: (state) => {\n            state.success = false\n            state.fetching = false\n        },\n        resetNfts: (state) => {\n            state.nfts = []\n            state.fetching = true\n            state.success = undefined\n        }\n    }\n})\n\nexport const profileReducer = profileSlice.reducer","import Lottie from \"react-lottie-player\";\nimport lottieJson from \"../../../resources/loading.json\";\nimport React from \"react\";\n\nconst TransactionLoader = (props) => {\n    return (\n        <div>\n            <div className=\"pt-20 h-screen flex bg-black justify-center\">\n                <div className=\"my-auto\">\n                    <Lottie\n                        loop\n                        animationData={lottieJson}\n                        play\n                        style={{width: 200, height: 200}}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TransactionLoader;","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {useSigningClient} from \"../../../wallet/hooks\";\n\nconst Guest = () => {\n    const {\n        walletAddress,\n        signingClient,\n        loading,\n        error,\n        connectWallet,\n        disconnect,\n        gasPrice\n    } = useSigningClient();\n    return (\n        <div className=\"auto pt-20 bg-black h-screen\">\n            <div className=\"p-2 text-2xl text-center font-extrabold text-transparent bg-clip-text\n                           md:text-5xl bg-gradient-to-br from-blue-200 to-blue-500\">\n                Wallet not connected\n            </div>\n            <div className=\"flex items-center justify-center\">\n                <div className=\"w-24\">\n                    <Link to=\"/\"\n                          onClick={connectWallet}\n                          className=\"cursor-pointer w-full py-2 flex items-center justify-center font-bold text-lg font-large rounded-md text-white bg-gradient-to-br from-mjol-blue-base to-green-200 hover:from-green-200 hover:to-mjol-blue-base\"\n                    >\n                        Connect\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Guest;","import React from 'react';\n\nconst NftImage = ({path}) => {\n    return (\n        <div className=\"aspect-w-1 aspect-h-1 mb-1 аlex justify-center\">\n            <img src={path}\n                 alt=\"media not supported\"\n                 className=\"object-contain\"\n            />\n        </div>\n    );\n};\n\nexport default NftImage;","import React from 'react';\n\nconst NftBoxContainer = ({children}) => {\n    return (\n        <div className=\"group flex flex-col overflow-hidden justify-between\n                        rounded-xl bg-white ring-1 ring-yellow-200\n                        select-none\n                        shadow-mjol-blue-all-xs\n                        transform duration-300 ease-border-timing\n                        hover:shadow-mjol-blue-all-md hover:ring-yellow-400\"\n        >\n            {children}\n        </div>\n    );\n};\n\nexport default NftBoxContainer;","import React from 'react';\n\nconst NftMintedLink = ({mintedName, mintedLink}) => {\n    return (\n        <a className=\"text-white font-semibold hover:text-mjol-purple-base\"\n           href={mintedLink}\n           target=\"_blank\"\n        >\n            _\n        </a>\n    );\n};\n\nexport default NftMintedLink;","import React from 'react';\n\nconst NftTitle = ({title}) => {\n    return (\n        <div className=\"font-extrabold text-mjol-purple-dark truncate\n                        text-sm md:text-md 2xl:text-lg\">\n            {title}\n        </div>\n    );\n};\n\nexport default NftTitle;","import React, {useState} from 'react';\nimport MjolGreenBlueButton from \"../buttons/MjolGreenBlueButton\";\n\nconst InputPriceModal = ({hidden, setVisible, onClick}) => {\n\n    const [price, setPrice] = useState('')\n\n    return (\n        <div>\n            {hidden\n                ? <></>\n                :\n                <div className=\"z-40 fixed inset-0 bg-gray-600 bg-opacity-90 overflow-y-auto\n                                                    h-full w-full grid place-items-center\">\n                    <div className=\"relative p-4 w-full max-w-md h-full md:h-auto\">\n                        <div className=\"relative bg-white rounded-lg shadow dark:bg-gray-700\">\n                            <button type=\"button\"\n                                    className=\"absolute top-3 right-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-800 dark:hover:text-white\"\n                                    data-modal-toggle=\"popup-modal\"\n                                    onClick={() => setVisible(false)}\n                            >\n                                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\"\n                                     xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path fillRule=\"evenodd\"\n                                          d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\n                                          clipRule=\"evenodd\"/>\n                                </svg>\n                            </button>\n                            <div className=\"p-6 text-center\">\n\n                                <h2 className=\"text-blue-700 font-extrabold text-3xl mb-10\">\n                                    Transfer NFT\n                                </h2>\n\n                                <div className=\"inline-flex\">\n                                    <input className=\"rounded-lg p-2 mb-10\"\n                                           type=\"text\"\n                                           placeholder=\"address: archway1x86...\"\n                                           value={price}\n                                           onChange={e => setPrice(e.target.value)}\n                                    />\n                                    <div className=\"mt-2\"></div>\n                                </div>\n                                <div></div>\n\n                                <button data-modal-toggle=\"popup-modal\" type=\"button\"\n                                        onClick={() => onClick(price)}\n                                        className=\"text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center mr-2\">\n                                    Send\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                //             <div className=\"fixed inset-0 bg-gray-600 bg-opacity-90 overflow-y-auto\n                //                                h-full w-full grid place-items-center\"\n                //             >\n                //                 <div className=\"w-1/2 grid grid-rows-2 gap-4 px-2 py-4 rounded-lg bg-mjol-white\">\n                //                     <input className=\"rounded-lg p-2\"\n                //                            type=\"number\"\n                //                            placeholder=\"Price you want your NFT to be sold\"\n                //                            value={price}\n                //                            onChange={e => setPrice(e.target.value)}\n                //                     />\n                //                     <MjolGreenBlueButton onClick={() => onClick(price)}>\n                //                         Sell\n                //                     </MjolGreenBlueButton>\n                //                     <MjolGreenBlueButton onClick={() => setVisible(false)}>\n                //                         Close popup\n                //                     </MjolGreenBlueButton>\n                //                 </div>\n                //             </div>\n            }\n        </div>\n    );\n};\n\nexport default InputPriceModal;","import {useDispatch, TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {AppDispatch, RootState} from \"../state/store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import {TransactionStatus} from \"../state\";\nimport {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState: TransactionStatus = {\n    pending: undefined,\n    full_success: undefined,\n    success_state: undefined\n}\n\nexport const marketNftTransactionSlice = createSlice({\n    name: 'market-nft-transaction',\n    initialState,\n    reducers: {\n        commit: (state) => {\n            state.pending = true\n            state.success_state = \"disabled\"\n        },\n        commit_two: (state) => {\n            state.pending = true\n            state.success_state = \"enabled\"\n        },\n        first_success: (state) => {\n            state.success_state = \"done 1/2\"\n        },\n        success: (state) => {\n            state.full_success = true\n            state.pending = false\n            state.success_state = \"done 2/2\"\n        },\n        failure: (state) => {\n            state.full_success = false\n            state.success_state = \"disabled\"\n            state.pending = false\n        },\n        reset: () => initialState\n    }\n})\n\nexport const marketNftTransactionReducer = marketNftTransactionSlice.reducer","import React, {useState} from 'react';\nimport NftImage from \"./details/image/NftImage\";\nimport NftBoxContainer from \"./NftBoxContainer\";\nimport NftMintedLink from \"./details/minted/NftMintedLink\";\nimport NftTitle from \"./details/title/NftTitle\";\n\nimport InputPriceModal from \"../ui/modal/InputPriceModal\";\nimport {useAppDispatch} from \"../../hooks/redux\";\nimport {sendNft} from \"../../state/transaction/nft/thunk\";\n\nconst NftItem = ({nft, isPreview, accountId, signingClient, gasPrice}) => {\n    let [visible, setVisible] = useState(true);\n    const previewLink = `/nft/${nft.contractId}/${nft.tokenId}`\n    console.log(previewLink)\n    const isListed = nft.isListed()\n    const dispatch = useAppDispatch()\n    // useEffect((): any => {\n    //     dispatch(fetchNft(nft.contractId, nft.tokenId))\n    //     return () => dispatch(previewNftSlice.actions.reset())\n    // }, [updPage])\n\n\n\n    const send = (to_addr) => {\n        dispatch(sendNft(accountId, signingClient, gasPrice, nft.contractId, nft.tokenId, to_addr))\n    }\n\n\n    return (\n        <NftBoxContainer>\n            {isPreview ? (\n                <NftImage path={nft.mediaURL}/>\n            ) : (\n                <div>\n                    <InputPriceModal hidden={visible} setVisible={() => setVisible(!visible)}\n                                     onClick={send}/>\n                    <div className=\"cursor-pointer\" onClick={() => setVisible(!visible)}>\n                        <NftImage path={nft.mediaURL}/>\n                    </div>\n                </div>\n            )}\n\n            <div className=\"px-5\">\n                {/*<Link to={previewLink}>*/}\n                <NftTitle title={nft.title}/>\n                {/*</Link>*/}\n                {/*<NftCollection collectionLogoLink=\"MOCK\"*/}\n                {/*               collectionLink=\"MOCK\"*/}\n                {/*               collectionName=\"Main collection\"/>*/}\n                <div className=\"grid place-items-end\">\n                    <div className=\"inline-flex space-x-1 text-tiny-2 xs:text-tiny-3 2xl:text-tiny-4 items-center\">\n                        <NftMintedLink mintedName={nft.mintSite.name}\n                                       mintedLink={nft.mintSite.nftLink}/>\n                        {/*{nft.mintSite.name === 'Non-verified contract' ? (*/}\n                        {/*    <></>*/}\n                        {/*) : (*/}\n                        {/*    //<NftVerifiedStatus/>*/}\n                        {/*)*/}\n                        {/*}*/}\n                    </div>\n                </div>\n                <hr className=\"ring-1 ring-mjol-purple-dark border-none\"/>\n                <div className=\"py-2 truncate text-clip text-blue-500\">\n                    <label className=\"underline\">Owner:</label> {nft.ownerId}\n                </div>\n            </div>\n        </NftBoxContainer>\n    );\n};\n\nexport default NftItem;","import {AppDispatch} from \"../../store\";\nimport {marketNftTransactionSlice} from \"./slice\";\nimport {GasPrice} from \"@cosmjs/stargate\";\nimport {SigningCosmWasmClient} from \"@cosmjs/cosmwasm-stargate\";\nimport {sendNFT} from \"../../../business-logic/api/api\";\n\n\n\nexport const sendNft = (accountId: String, signingClient: SigningCosmWasmClient, gasPrice: GasPrice, contractId: string, tokenId: string, to_addr: string) =>\n    async (dispatch: AppDispatch) => {\n        dispatch(marketNftTransactionSlice.actions.commit())\n        sendNFT(accountId, signingClient, gasPrice, contractId, tokenId, to_addr)\n            .then(() => {\n                dispatch(marketNftTransactionSlice.actions.success())\n            })\n            .catch(() => dispatch(marketNftTransactionSlice.actions.failure()))\n    }\n\n","import React, {useEffect, useState} from 'react';\nimport SingleLineContainer from \"./upload/containers/SingleLineContainer\";\nimport MultiLineContainer from \"./upload/containers/MultiLineContainer\";\nimport PropertyInput from \"./upload/lines/PropertyInput\";\nimport UploadFileInput from \"./upload/UploadFileInput\";\nimport {makeNftLink, storeNFT} from \"../../../../business-logic/ipfs/upload\";\nimport DarkBlueTitle from \"../../../ui/text/DarkBlueTitle\";\nimport BlueShadowContainer from \"../../../ui/shadow/BlueShadowContainer\";\nimport {useSigningClient} from \"../../../../wallet/hooks\";\nimport {mintToCommonCollection} from \"../../../../business-logic/api/api\";\nimport TransactionLoader from \"../../../ui/loaders/TransactionLoader\";\nimport Guest from \"../../guest/Guest\";\nimport NftItem from \"../../../nft-item/NftItem\";\nimport {MintSite, NFT} from \"../../../../business-logic/models/nft\";\n\n\nconst LineAlert = ({state, setState}) => {\n    return (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <span className=\"block sm:inline\">{state}</span>\n            <span className=\"absolute top-0 bottom-0 right-0 px-4 py-3\">\n                <svg className=\"fill-current h-6 w-6 text-red-500\" role=\"button\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     viewBox=\"0 0 20 20\"\n                     onClick={() => setState(\"\")}>\n                    <title>Close</title>\n                    <path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1\n                    1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1\n                    1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"\n                    />\n                </svg>\n            </span>\n        </div>\n    )\n};\n\n\nconst CreateNftPage = () => {\n    const {\n        walletAddress,\n        signingClient,\n        loading,\n        error,\n        connectWallet,\n        disconnect,\n        gasPrice\n    } = useSigningClient();\n\n    if (walletAddress === \"\") {\n        return (\n            <Guest/>\n        )\n    }\n\n    const MIN_TITLE_LEN = 3;\n    const MAX_TITLE_LEN = 30;\n    const MAX_DESC_LEN = 120;\n    const MIN_ROYALTY = 0;\n    const MAX_ROYALTY = 50;\n    const MIN_TRAITS_LEN = 1;\n    const MAX_TRAITS_LEN = 20;\n\n    const exampleNft = new NFT(\n        \"\",\n        \"\",\n        \"\",\n        \"My NFT\",\n        \"\",\n        1,\n        \"https://i.ibb.co/DWVq0Z3/placeholder.png\",\n        \"\",\n        new MintSite(\"\", \"\"),\n        null\n    );\n\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [royalty, setRoyalty] = useState(0);\n    const [file, setFile] = useState(null);\n    const [isLoading, setIsLoading] = useState(\"disabled\");\n    const [alertText, setAlertText] = useState(\"\");\n    const [nft, setNFT] = useState(exampleNft);\n\n\n    const [propertiesNum, setPropertiesNum] = useState([1]);\n    const [fetchProperties, setFetchProperties] = useState(false);\n    const addProperty = () => {\n        setPropertiesNum(propertiesNum.concat(propertiesNum[propertiesNum.length - 1] + 1));\n        setFetchProperties(!fetchProperties);\n    };\n    const delProperty = () => {\n        if (propertiesNum.length !== 1) {\n            const tmpNum = propertiesNum;\n            tmpNum.pop();\n            setPropertiesNum(tmpNum);\n            setFetchProperties(!fetchProperties);\n        }\n    };\n\n    const submitForm = (e) => {\n        e.preventDefault();\n        setAlertText(\"\");\n        if (walletAddress === \"\") {\n            return\n        }\n        if (!(title.length <= MAX_TITLE_LEN && title.length >= MIN_TITLE_LEN)) {\n            setAlertText(`Title length must be between ${MIN_TITLE_LEN} and ${MAX_TITLE_LEN} characters`);\n            return\n        }\n        if (!(description.length <= MAX_DESC_LEN)) {\n            setAlertText(`Description length must be less than ${MAX_DESC_LEN} characters`);\n            return\n        }\n        if (!(royalty <= MAX_ROYALTY && royalty >= MIN_ROYALTY)) {\n            setAlertText(`Royalty must be less than ${MAX_ROYALTY}`);\n            return\n        }\n        if (file === null) {\n            setAlertText(`Please upload your NFT file`);\n            return\n        }\n\n        setIsLoading(\"ipfs loading\");\n        storeNFT(title,\n            description,\n            file,\n            {}).then(res => {\n            console.log(res);\n            const ipfsMedia = makeNftLink(res.data.image.href);\n            const ipfsRef = makeNftLink(res.url);\n            let token_metadata = {\n                title: title,\n                description: description,\n                media: ipfsMedia,\n                reference: ipfsRef,\n                copies: 1\n            };\n            let payout = null;\n            if (royalty !== 0) {\n                payout = {\n                    payout: {}\n                };\n                payout[\"payout\"][walletAddress] = (100 * royalty).toString();\n            }\n            setIsLoading(\"tx loading\")\n            mintToCommonCollection(walletAddress, signingClient, gasPrice, token_metadata, payout).then(() => {\n                setFile(null)\n                setIsLoading(\"disabled\")\n            }).catch(() => setIsLoading(\"disabled\"));\n        }).catch((e) => {\n                setAlertText(`Error: Can't upload file to ipfs, try again or contact to our support`);\n                setIsLoading(\"disabled\")\n                console.log(e);\n            }\n        )\n    };\n\n\n    useEffect(() => {\n        let curURL;\n        let curText;\n        if (title === \"\") {\n            curText = \"My NFT\"\n        } else {\n            curText = title\n        }\n        if (file !== null) {\n            curURL = URL.createObjectURL(file)\n        } else {\n            curURL = \"https://i.ibb.co/DWVq0Z3/placeholder.png\"\n        }\n        let curNFT = exampleNft;\n        curNFT.mediaURL = curURL\n        curNFT.title = curText\n        curNFT.ownerId = walletAddress\n        setNFT(curNFT)\n    }, [file, title])\n\n    useEffect(() => {\n        console.log(\"hello\", nft)\n    }, [nft])\n\n\n\n\n    return (\n        <>\n            {isLoading !== \"disabled\" ? (\n                <TransactionLoader stage={isLoading}/>\n            ) : (\n                <div className=\"bg-black h-screen\">\n                    <BlueShadowContainer>\n                        <div className=\"pb-10 px-4 space-y-8\">\n                            <DarkBlueTitle title=\"Mint NFT\"/>\n                        </div>\n                    </BlueShadowContainer>\n                    <div className=\"bg-black max-w-7xl py-10 mx-auto px-4 sm:px-6\">\n                        <form onSubmit={submitForm}>\n                            <div className=\"bg-black shadow rounded-md overflow-hidden\">\n                                <div className=\"bg-grey-700 px-4 py-5 space-y-6 p-6\">\n                                    <div className=\"grid grid-cols-3 gap-6\">\n                                        <div className=\"col-start-1 col-end-2\">\n                                            <UploadFileInput state={file} setState={setFile}/>\n                                        </div>\n                                        <div className=\"col-start-3 col-end-3 row-span-3\">\n                                            <NftItem key={\"111\"} nft={nft} isPreview={true}/>\n                                        </div>\n                                        <div className=\"col-start-1 col-end-3\">\n                                            <SingleLineContainer name={'Title'}\n                                                                 required={true}\n                                                                 text={'My NFT'}\n                                                                 type={'text'}\n                                                                 minLength={MIN_TITLE_LEN}\n                                                                 maxLength={MAX_TITLE_LEN}\n                                                                 id={'mint-title'}\n                                                                 setState={setTitle}\n                                            />\n                                        </div>\n                                        <div className=\"col-start-1 col-end-3\">\n                                            <MultiLineContainer name={'Description'}\n                                                                text={'Brief description for your NFT'}\n                                                                maxLength={MAX_DESC_LEN}\n                                                                rows={3}\n                                                                id={'mint-desc'}\n                                                                setState={setDescription}\n                                            />\n                                        </div>\n                                        <div className=\"col-start-1 col-end-3\">\n                                            <SingleLineContainer name={'Royalty'}\n                                                                 text={'Royalties on secondary sales(%), number from 0-50'}\n                                                                 type={'number'}\n                                                                 min={MIN_ROYALTY}\n                                                                 max={MAX_ROYALTY}\n                                                                 id={'mint-royalty'}\n                                                                 setState={setRoyalty}\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"grid grid-cols-6 gap-6\">\n                                        <label className=\"col-span-6 text-sm font-medium text-white\">\n                                            Traits:\n                                            <button\n                                                type=\"button\"\n                                                onClick={addProperty}\n                                                className=\"ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                                            >\n                                                +\n                                            </button>\n                                            <button\n                                                type=\"button\"\n                                                onClick={delProperty}\n                                                className=\"ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n                                            >\n                                                -\n                                            </button>\n                                        </label>\n                                        {propertiesNum.map(ind => (\n                                            <>\n                                                <PropertyInput name={'Key #' + ind}\n                                                               type={'text'}\n                                                               minLength={MIN_TRAITS_LEN}\n                                                               maxLength={MAX_TRAITS_LEN}\n                                                               id={'mint-key-' + ind}\n                                                />\n                                                <PropertyInput name={'Value #' + ind}\n                                                               type={'text'}\n                                                               minLength={MIN_TRAITS_LEN}\n                                                               maxLength={MAX_TRAITS_LEN}\n                                                               id={'mint-value-' + ind}\n                                                />\n                                            </>\n                                        ))}\n                                    </div>\n\n                                    {alertText !== \"\" ? (\n                                        <LineAlert state={alertText} setState={setAlertText}/>\n                                    ) : (\n                                        <></>\n                                    )}\n                                </div>\n                                <div className=\"px-4 py-3 bg-black text-left sm:px-6\">\n                                    <button\n                                        type=\"submit\"\n                                        className=\"inline-flex justify-center py-2 px-6 font-bold text-lg hover:text-gray-900 font-large rounded-md text-white bg-gradient-to-br from-mjol-blue-base to-green-200 hover:from-green-200 hover:to-mjol-blue-base\"\n                                    >\n                                        Mint\n                                    </button>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            )\n            }\n        </>\n    )\n};\n\nexport default CreateNftPage;","import NftItem from \"../nft-item/NftItem\";\nimport React from \"react\";\nimport {useSigningClient} from \"../../wallet/hooks\";\n\nconst NftsGrid = ({nfts, fetching}) => {\n    // const loaders = Array(12)\n    //     .fill(0)\n    //     .map((i, idx) =>\n    //         <SmallNftLoader key={idx} width={280} height={410}/>\n    //     )\n\n    const {\n        walletAddress,\n        signingClient,\n        loading,\n        error,\n        gasPrice\n    } = useSigningClient();\n\n    return (\n        <div className=\"bg-black\">\n            <div className=\"bg-black max-w-screen-2xl mx-auto\">\n            <div className=\"bg-black max-w-7xl mx-auto py-8 px-8\">\n                <div className=\"bg-black h-screen p-5 md:p-10 \">\n                    <div className=\"grid gap-8 lg:gap-8 xl:gap-10 justify-center auto-rows-min\n                        grid-cols-3\n                        xxs:grid-cols-1nft-280\n                        sm:grid-cols-2nft-280\n                        lg:grid-cols-3nft-280\n                        xl:grid-cols-4nft-280\n                        2xl:grid-cols-4nft-300\">\n                        {nfts.length === 0\n                            ? <div>\n                                {/* <div className=\"mt-20\">*/}\n                                {/*     <div className=\"p-2 text-2xl text-center font-extrabold text-transparent bg-clip-text*/}\n                                {/*md:text-4xl bg-gradient-to-br from-yellow-500 to-yellow-800\">*/}\n                                {/*         You don't have any NFTs*/}\n                                {/*     </div>*/}\n                                {/* </div>*/}\n                            </div>\n                            : nfts.map(nft =>\n                                <NftItem key={nft.getKey()} nft={nft} isPreview={false} accountId={walletAddress}\n                                         signingClient={signingClient} gasPrice={gasPrice}/>\n                            )\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n</div>\n)\n    ;\n};\n\nexport default NftsGrid;\n","import React from 'react';\nimport NftsGrid from \"../../../nft-collection/NftsGrid\";\n\nconst ExploreNftPage = ({nfts, fetching}) => {\n\n    return (\n        <div className=\"space-y-6\">\n            <NftsGrid nfts={nfts} fetching={fetching}/>\n        </div>\n    );\n};\n\nexport default ExploreNftPage;","import React, {useEffect} from 'react';\nimport ExploreNftsPage from \"../../../components/pages/explore/nft/ExploreNftPage\";\nimport {useAppDispatch, useAppSelector} from \"../../../hooks/redux\";\n\nimport {fetchMyNfts} from \"../../../state/profile/thunk\";\nimport {useSigningClient} from \"../../../wallet/hooks\";\n\nconst ExploreNftsPageHoc = () => {\n\n    const {\n        walletAddress,\n        signingClient,\n        loading,\n        error\n    } = useSigningClient();\n    const {nfts, fetching, activeTab} = useAppSelector(state => state.profile)\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchMyNfts(walletAddress))\n        return () => dispatch(profileSlice.actions.resetNfts())\n    }, [])\n\n    return <ExploreNftsPage nfts={nfts} fetching={fetching}/>\n};\n\nexport default ExploreNftsPageHoc;","import {AppDispatch} from \"../store\";\nimport {profileSlice} from \"./slice\";\nimport {getUserNFTs} from \"../../business-logic/api/api\";\n\nexport const fetchMyNfts = (accountId: string) => async (dispatch: AppDispatch) => {\n    dispatch(profileSlice.actions.startFetching())\n    getUserNFTs(accountId)\n        .then(nfts => {\n                nfts.map(nftPromise =>\n                    nftPromise\n                        .then(nft => {\n                            dispatch(profileSlice.actions.addNft(nft))\n                        })\n                        .catch(() => console.log('NFT not found'))\n                )\n                dispatch(profileSlice.actions.success())\n            }\n        )\n        .catch(() => dispatch(profileSlice.actions.failure()))\n}","import React from 'react';\nimport {Route, Routes} from \"react-router\";\nimport NotFoundPage from \"../components/pages/not-found/NotFoundPage\";\nimport CreateNftPage from \"../components/pages/create/nft/CreateNftPage\";\nimport ExploreNftsPageHoc from \"../hoc/explore/nft/ExploreNftsPageHoc\";\n\n\nconst AppRouter = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" exact element={<CreateNftPage/>} key=\"1\"/>\n            {/*<Route path=\"/logout\" exact element={<Logout logout={() => 0}/>}/>*/}\n            <Route path=\"/nfts\" exact element={<ExploreNftsPageHoc/>} key=\"2\"/>\n            {/*<Route path=\"/nft/:contractId/:tokenId\" exact element={<PreviewNftHoc/>} key=\"30\"/>*/}\n            {/*<Route path=\"/collections\" element={<ExploreCollectionsPage/>} key=\"3\"/>*/}\n            {/*<Route path=\"/create-nft\" element={<CreateNftPage/>} key=\"4\"/>*/}\n            {/*<Route path=\"/create-collection\" element={<CreateCollectionPage/>} key=\"5\"/>*/}\n            {/*<Route path=\"/profile/nfts\" element={<ProfilePageHoc/>} key=\"6\"/>*/}\n            {/*<Route path=\"/profile-collection\" element={<ProfileNftCollectionsPage/>} key=\"11\"/>*/}\n            <Route path=\"*\" element={<NotFoundPage/>} key=\"12\"/>\n        </Routes>\n    );\n};\n\nexport default AppRouter;\n\n\n\n","export default __webpack_public_path__ + \"static/media/label.fffa84ea.png\";","import React, {Fragment} from 'react'\nimport {Popover, Transition} from '@headlessui/react'\nimport classNames from \"../../../utils/css-utils\";\nimport {CloseMenuButton, MenuButton} from \"../../ui/navbar/buttons\";\nimport {Link} from \"react-router-dom\";\nimport {TabsDropDownMenu} from \"./menu/TabDropDownMenu\";\nimport imgLabel from \"../../../resources/label.png\"\nimport {useSigningClient} from \"../../../wallet/hooks\";\n\n\nfunction SmallNavBar({tabs}) {\n    return (\n        <div className=\"grid grid-cols-2 gap-y-4 gap-x-8\">\n            {tabs.map(({path, name}) => (\n                <>\n                    {name === \"Launchpad\" || name === \"Docs\" ? (\n                        <div\n                            className=\"cursor-not-allowed text-base font-medium text-gray-900 hover:text-gray-500\">\n                            {name}\n                        </div>\n                    ) : (\n                        <Link to={path} key={name}>\n                            <div\n                                className=\"cursor-pointer text-base font-medium text-gray-900 hover:text-gray-500\">\n                                {name}\n                            </div>\n                        </Link>\n                    )}\n                </>\n            ))}\n        </div>\n    )\n}\n\nexport default function Navbar({tabs}) {\n    const exploreTabs = tabs.explore\n    const createTabs = tabs.create\n    const profileTabs = tabs.profile\n    const singleTabs = tabs.single\n\n    const {\n        walletAddress,\n        signingClient,\n        loading,\n        error,\n        connectWallet,\n        disconnect\n    } = useSigningClient();\n\n    return (\n        <Popover className=\"bg-black\">\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6\">\n                <div\n                    className=\"flex justify-between items-center border-b-2 border-gray-200 py-6 md:justify-start md:space-x-10\">\n                    <div className=\"flex justify-start lg:w-0 lg:flex-1\">\n                        <Link to=\"/\">\n                            <img\n                                className=\"inline-block h-8 w-auto sm:h-10\"\n                                src={imgLabel}\n                                alt=\"\"\n                            />\n                        </Link>\n                    </div>\n                    {walletAddress !== \"\" ? (\n                        <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\n                            <div\n                                className=\"cursor-pointer text-lg font-extrabold text-mjol-blue-light hover:text-gray-900\"\n                            >\n                                <Link to=\"/nfts\">\n                                    My NFTs\n                                </Link>\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"hidden md:flex items-center justify-end md:flex-1 lg:w-0\">\n                            <Link to=\"/\"\n                                  onClick={connectWallet}\n                                  className=\"inline-flex justify-center py-1.5 px-4 font-bold text-lg font-large rounded-md text-white bg-gradient-to-br from-mjol-blue-base to-green-200 hover:from-green-200 hover:to-mjol-blue-base\"\n                            >\n                                Connect\n                            </Link>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </Popover>\n    )\n}","import Navbar from \"./Navbar\";\n\nimport React from 'react';\nimport {useAppSelector} from \"../../../hooks/redux\";\n\nconst NavbarContainer = () => {\n    const tabs = useAppSelector(state => state.navbar.tabs)\n\n    return <Navbar tabs={tabs}/>;\n};\n\nexport default NavbarContainer;","import React from 'react'\nimport AppRouter from \"./AppRouter\";\nimport NavbarContainer from \"../components/pages/navbar/NavbarContainer\";\nimport {SigningCosmWasmProvider} from \"../wallet/hooks\";\n\nexport default function App() {\n\n    return (\n        <SigningCosmWasmProvider>\n            <NavbarContainer/>\n            <AppRouter/>\n            {/*<FooterPage/>*/}\n        </SigningCosmWasmProvider>\n    )\n}","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    tabs: {\n        explore: [\n            {name: 'NFTs', path: '/nfts'},\n            {name: 'Collections', path: '/collections'},\n        ],\n        create: [\n            {name: 'NFT', path: '/create-nft'},\n            {name: 'Collection', path: '/create-collection'}\n        ],\n        profile: [\n            {name: 'My NFTs', path: '/profile/nfts'},\n            {name: 'My Collections', path: '/profile/collections'},\n            {name: 'Sign out', path: '/logout'}\n        ],\n        single: [\n            {name: 'Launchpad', path: '/launchpad'},\n            {name: 'Docs', path: '/docs'}\n        ]\n    }\n}\n\nexport const navbarSlice = createSlice({\n    name: \"navbar\",\n    initialState,\n    reducers: {}\n})\n\nexport const navbarReducer = navbarSlice.reducer","import {configureStore} from \"@reduxjs/toolkit\";\nimport {combineReducers} from \"redux\";\nimport {profileReducer} from \"./profile/slice\";\nimport {navbarReducer} from \"./navbar/slice\";\nimport {marketNftTransactionReducer} from \"./transaction/nft/slice\";\n\n\nexport const rootReducer = combineReducers({\n    navbar: navbarReducer,\n    profile: profileReducer,\n    transaction: marketNftTransactionReducer\n})\n\nexport const setupStore = () => {\n    return configureStore({\n        reducer: rootReducer\n    })\n}\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport type AppStore = ReturnType<typeof setupStore>\nexport type AppDispatch = AppStore['dispatch']","import './index.css';\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport App from \"./launch/App\";\nimport {setupStore} from \"./state/store\";\n\nconst store = setupStore()\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n)"],"sourceRoot":""}